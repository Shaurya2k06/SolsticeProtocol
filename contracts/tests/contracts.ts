import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Contracts } from "../target/types/contracts";
import { PublicKey, SystemProgram } from "@solana/web3.js";
import { assert } from "chai";

describe("Solstice Protocol - ZK Identity Verification", () => {
  // Configure the client to use the local cluster.
  anchor.setProvider(anchor.AnchorProvider.env());

  const program = anchor.workspace.contracts as Program<Contracts>;
  const provider = anchor.AnchorProvider.env();

  // PDAs
  let registryPda: PublicKey;
  let identityPda: PublicKey;

  before(async () => {
    // Derive registry PDA
    [registryPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("registry")],
      program.programId
    );

    // Derive identity PDA for the provider's wallet
    [identityPda] = PublicKey.findProgramAddressSync(
      [Buffer.from("identity"), provider.wallet.publicKey.toBuffer()],
      program.programId
    );
  });

  it("Initialize registry", async () => {
    const tx = await program.methods
      .initialize()
      .accounts({
        registry: registryPda,
        authority: provider.wallet.publicKey,
        systemProgram: SystemProgram.programId,
      })
      .rpc();

    console.log("✅ Registry initialized:", tx);
    assert.ok(tx, "Transaction signature should exist");
  });

  it("Register identity with compression", async () => {
    // Create test identity commitment and merkle root (32 bytes each)
    const identityCommitment = Buffer.alloc(32, 1);  // All 1s for testing
    const merkleRoot = Buffer.alloc(32, 2);  // All 2s for testing

    try {
      const tx = await program.methods
        .registerIdentity(
          Array.from(identityCommitment),
          Array.from(merkleRoot)
        )
        .accounts({
          identity: identityPda,
          registry: registryPda,
          user: provider.wallet.publicKey,
          systemProgram: SystemProgram.programId,
        })
        .rpc();

      console.log("✅ Identity registered:", tx);
      assert.ok(tx, "Transaction signature should exist");
    } catch (err) {
      // May fail if discriminator is wrong, but that's OK for now
      console.log("⚠️  Register identity error (expected with manual IDL):", err.message);
    }
  });

  it("Verify identity with Groth16 proof (placeholder)", async () => {
    // Create dummy proof (256 bytes) - in production this would be a real proof
    const dummyProof = Buffer.alloc(256, 0);
    // Create dummy public inputs (3 * 32 bytes = 96 bytes)
    const dummyPublicInputs = Buffer.alloc(96, 1);
    const attributeType = 1; // Age proof

    try {
      const tx = await program.methods
        .verifyIdentity(
          Array.from(dummyProof),
          Array.from(dummyPublicInputs),
          attributeType
        )
        .accounts({
          identity: identityPda,
          authority: provider.wallet.publicKey,
        })
        .rpc();

      console.log("⚠️  Verification transaction sent (will fail with dummy proof):", tx);
    } catch (err) {
      console.log("✅ Expected failure with dummy proof:", err.message);
      // This is expected - real proofs need to be generated by the circuit
    }
  });
});
